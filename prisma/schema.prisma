// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  recipes       Recipe[]
  comments      Comments[]
  likes         Likes[]
  dislikes      Dislikes[]
  accounts      Account[]
  sessions      Session[]
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model User {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   name      String
//   password  String
//   skill_id  Int
//   skill     Skill    @relation(fields: [skill_id], references: [id])
//   recipes   Recipe[]
//   comments  comments[]
//   likes     likes[]
//   dislikes  dislikes[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Skill {
//   id        Int      @id @default(autoincrement())
//   title     String   @unique
//   users     User[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Recipe {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  ingredients   String
  steps     String
  comments  Comments[]
  likes     Likes[]
  dislikes  Dislikes[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Comments {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipeId Int
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Likes {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipeId Int
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dislikes {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipeId Int
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}